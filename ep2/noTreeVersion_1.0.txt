/****************************************************************
 Nome: Eduardo Yukio Rodrigues
 NUSP: 8988702

 Ao preencher esse cabeçalho com o meu nome e o meu número USP,
 declaro que todas as partes originais desse exercício programa (EP)
 foram desenvolvidas e implementadas por mim e que portanto não
 constituem desonestidade acadêmica ou plágio.
 Declaro também que sou responsável por todas as cópias desse
 programa e que não distribui ou facilitei a sua distribuição.
 Estou ciente que os casos de plágio e desonestidade acadêmica
 serão tratados segundo os critérios divulgados na página da
 disciplina.
 Entendo que EPs sem assinatura devem receber nota zero e, ainda
 assim, poderão ser punidos por desonestidade acadêmica.

 Abaixo descreva qualquer ajuda que você recebeu para fazer este
 EP.  Inclua qualquer ajuda recebida por pessoas (inclusive
 monitoras e colegas). Com exceção de material de MAC0323, caso
 você tenha utilizado alguma informação, trecho de código,...
 indique esse fato abaixo para que o seu programa não seja
 considerado plágio ou irregular.

 Exemplo:

 A monitora me explicou que eu devia utilizar a função xyz().

 O meu método xyz() foi baseada na descrição encontrada na
 página https://www.ime.usp.br/~pf/algoritmos/aulas/enumeracao.html.

 Descrição de ajuda ou indicação de fonte:



 Se for o caso, descreva a seguir 'bugs' e limitações do seu programa:
 ****************************************************************/

/******************************************************************************
 *  Compilation:  javac-algs4 STPerms.java
 *  Execution:    java STPerms n s t opcao
 *
 *  Enumera todas as (s,t)-permutações das n primeiras letras do alfabeto.
 *  As permutações devem ser exibidas em ordem lexicográfica.
 *  Sobre o papel da opcao, leia o enunciado do EP.
 *
 *  % java STPerms 4 2 2 0
 *  badc
 *  bdac
 *  cadb
 *  cdab
 *  4
 *  % java STPerms 4 2 2 1
 *  4
 *  % java STPerms 4 2 2 2
 *  badc
 *  bdac
 *  cadb
 *  cdab
 *  4
 *
 ******************************************************************************/

import edu.princeton.cs.algs4.StdOut;
import java.util.ArrayList;
import java.util.List;

public class STPerms {
    private static int n;
    private static int s;
    private static int t;
    private static int option;
    private static int count = 0;
    private static String alphabet = "abcdefghijklmnopqrstuvwxyz";
    private static String invertedAlphabet = "zyxwvutsrqponmlkjihgfedcba";
    private static List<String> invalidSequences;
    private static List<String> ascendingLengths = new ArrayList<String>();
    private static int maxAscendingLen = 0;
    private static int maxDescendingLen = 0;

    // find len! permutations of the characters of the string (in order)
    private static void findSTPermutations(String string) {
        findSTPermutations("", string);
    }

    private static void findSTPermutations(String prefix, String string) {
        int len = string.length();
        //aqui o prefix vai ser a permutação in the making
        //a primeira chamada vai ser com prefix "", que tem len == 0, blz
        //aí depois vai ser com prefix == "a", o que vai ser 1
        //depois "ab", depois "abc", depois "abcd", depois "abdc" e tals


//        int prefixLen = prefix.length();

        if(hasSubstringLargerThanMax(prefix)){
            return;
        }

        if (len == 0) {
            //achamos uma permutação
            printAndCount(prefix);
        } else {
            for (int i = 0; i < len; i++)
                findSTPermutations(prefix + string.charAt(i), string.substring(0, i) + string.substring(i + 1, len));
        }
    }
    //abcd
    //o prefix eh a sua permutação sendo criada
    //se vc perceber que o prefix abcd já zuou, ele não vai fazer as
    //chamadas recursivas que gerariam todos os filhos de abcd
    //ou seja, vc nem precisa gerar e checar 1x, vc NEM GERA!!
    //excelente!!


    private static boolean checkOrder(String string, boolean ascendingOrder){
        int len = string.length();
        if(len < 2) {
            return true;
        }

        for(int i = 0; i < string.length() - 1; i++){
            char currentLetter = string.charAt(i);
            char nextLetter = string.charAt(i + 1);

            if ((ascendingOrder && nextLetter < currentLetter) || (!ascendingOrder && nextLetter > currentLetter)) {
                return false;
            }
        }
        return true;
    }

    private static boolean hasSubstringLargerThanMax(String string){
        int stringLen = string.length();

        for (int i = 0; i < stringLen; i++) {
            for (int j = i+1; j <= stringLen; j++) {
                String subsequence = string.substring(i,j);
                int subsequenceLen = subsequence.length();
                if(checkOrder(subsequence, true)){
                    if(subsequenceLen > s){
                        return true;
                    }
                }
                if(checkOrder(subsequence, false)){
                    if(subsequenceLen > t){
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private static void printAndCount(String string){
        if (option != 1) {
            StdOut.println(string);
        }
        count++;
    }

    public static void main(String[] args) {
        long startTime = System.nanoTime();

        n = Integer.parseInt(args[0]);
        s = Integer.parseInt(args[1]);
        t = Integer.parseInt(args[2]);
        option = Integer.parseInt(args[3]);

        if (n < 1 || n > 26) {
            StdOut.println("Valor de n inválido. Por favor, insira um n inteiro entre 1 e 26.");
            return;
        }

        if (option < 0 || option > 2) {
            StdOut.println("Valor de option inválido. Por favor, insira um número inteiro entre 0 e 2.");
            return;
        }

        String substring = alphabet.substring(0, n);

        findSTPermutations(substring);
        if(option != 0){
            StdOut.println(count);
        }

        long endTime = System.nanoTime();

        StdOut.println("\n"+(endTime - startTime)/1000000);
    }
}
